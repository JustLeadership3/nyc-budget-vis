{"version":3,"sources":["logo.png","functions/agency-parsing-function.js","functions/parseCapitalExpenditures.js","functions/parseExpenseActuals.js","store/index.js","components/Graph.js","components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","parseAgencyApi","apiData","returnArray","data","dept","currYear","Date","now","getFullYear","i","length","elem","Object","keys","agency","agency_expenditures","toUpperCase","year","temp","expenseString","undefined","expenseNumber","parseFloat","replace","isNaN","x","toString","y","push","processCapitalExpenditures","json","bulkTotals","possibleDepartment","includes","k","oneDepartment","dataArray","fiscalYearString","amountInt","valuesHash","departmentHash","agencyDigestedName","substring","parseExpenseActuals","tempHash","forEach","entry","agencyName","fiscalYear","parseInt","cityFunds","entries","department","information","expense","defaultState","currentDataSet","capitalExp","agencyExp","expenseActuals","updateCurrentDataSet","type","store","createStore","state","action","applyMiddleware","thunk","createLogger","collapsed","Graph","legendData","returnedArray","this","props","displayName","currentDataSetName","console","log","id","scale","theme","VictoryTheme","material","padding","left","bottom","right","top","style","parent","maxwidth","width","text","fontSize","dy","dx","textAnchor","map","currentDept","color","Math","floor","random","getRandomColor","name","symbol","fill","key","stroke","border","gutter","itemsPerRow","Component","Cards","classes","className","definition","currentExpense","Card","root","variant","CardContent","Button","onClick","getData","connect","dispatch","a","axios","get","res","processedData","error","withStyles","minWidth","bullet","display","margin","transform","title","pos","marginBottom","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1c9711f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2445cf85.png\";","function parseAgencyApi(apiData) {\n  // will be the final data structure\n  let returnArray = [];\n  let data = [];\n  let dept = {};\n  const currDate = new Date(Date.now());\n  const currYear = currDate.getFullYear();\n  // loop through the data retrieved from the API\n  for (let i = 0; i < apiData.length; i++) {\n    let elem = apiData[i];\n\n    // if an element has only one key we know that key is the name of the department we are lookin at right now\n    if (Object.keys(elem).length === 1) {\n      dept.agency = elem.agency_expenditures.toUpperCase();\n    }\n    // if the name of the expendature is 'total dept' we want to loop through that object and add each years expense for the last five years\n    if (elem.agency_expenditures === 'TOTAL DEPT.') {\n      for (let year = currYear - 10; year <= currYear; year++) {\n        let temp = {};\n        // In the dataset, the years are listed in one of the following\n        // formats:\n        // 1. fyYEAR (e.g. fy2018\n        // 2. fy_YEAR (e.g. fy_2013)\n        const expenseString =\n          elem[`fy${year}`] !== undefined\n            ? elem[`fy${year}`]\n            : elem[`fy_${year}`];\n        // Since dataset is not always complete, there is a chance that\n        // the expense for a given year is undefined\n        if (expenseString !== undefined) {\n          const expenseNumber = parseFloat(expenseString.replace(/,/g, ''));\n          // The expense for an agency may not be in a number format\n          // (e.g. - 0) so we need to make sure the number parses to an\n          // actual number\n          if (!isNaN(expenseNumber)) {\n            temp.x = year.toString();\n            temp.y = parseFloat(expenseString.replace(/,/g, ''));\n            data.push(temp);\n          }\n        }\n      }\n      // finally add our department to the final data set and reset the dept obj so we can be ready for the next one.\n      dept.data = data;\n      returnArray.push(dept);\n      dept = {};\n      data = [];\n    }\n  }\n  return returnArray;\n}\n\nexport default parseAgencyApi;\n","function processCapitalExpenditures(json) {\n  // will be a list of all the data that is a department summary, identifyable by \"TOTAL\" in the name\n  var bulkTotals = [];\n\n  var i = 0;\n\n  while (i < json.length) {\n    const possibleDepartment = json[i];\n    var DepartmentName;\n    i += 1;\n    if ('agency_capital_expenditures_by_purpose' in possibleDepartment) {\n      DepartmentName =\n        possibleDepartment['agency_capital_expenditures_by_purpose'];\n      if (DepartmentName.includes('TOTAL')) bulkTotals.push(possibleDepartment);\n    }\n  }\n\n  // will be the return structure\n  // an array of hashes for each department wherein the data is nested in inner hashes for each data point\n  let returnArray = [];\n\n  let k = 0;\n  while (k < bulkTotals.length) {\n    const oneDepartment = bulkTotals[k];\n    const currDate = new Date(Date.now());\n    const currYear = currDate.getFullYear();\n    let dataArray = [];\n\n    for (let year = currYear - 10; year <= currYear; year++) {\n      const fiscalYearString = oneDepartment[`fy_${year}`];\n      if (fiscalYearString !== undefined) {\n        const amountInt = parseFloat(fiscalYearString.replace(/,/g, ''));\n        let valuesHash = {};\n        valuesHash['x'] = year.toString();\n        valuesHash['y'] = amountInt;\n        dataArray.push(valuesHash);\n      }\n    }\n\n    // will be the container to hold the department's name and data\n    let departmentHash = {};\n    const agencyDigestedName = oneDepartment[\n      'agency_capital_expenditures_by_purpose'\n    ]\n      .substring(6)\n      .toUpperCase();\n    departmentHash['agency'] = agencyDigestedName;\n    departmentHash['data'] = dataArray;\n    returnArray.push(departmentHash);\n    k += 1;\n  }\n  return returnArray;\n}\n\nexport default processCapitalExpenditures;\n","function parseExpenseActuals(json) {\n  // holds the department name, the last 5 years of data, money (in thousands) spent that year\n  let tempHash = {};\n  const currDate = new Date(Date.now());\n  const currYear = currDate.getFullYear();\n\n  json.forEach((entry) => {\n    const agencyName = entry['agy_nm'];\n    const fiscalYear = parseInt(entry['fisc_yr'], 10);\n    const cityFunds = parseInt(entry['cty_fnd'], 10);\n\n    // Only store entries if fiscalYear is within last 10 years from currYear\n    if (fiscalYear >= currYear - 10 && fiscalYear <= currYear) {\n      // If agencyName is not in tempHash, initialize agency as emtpy object\n      if (agencyName in tempHash !== true) {\n        tempHash[agencyName] = {};\n      }\n      tempHash[agencyName][fiscalYear] = cityFunds;\n    }\n  });\n\n  // will be external data structure\n  let returnArray = [];\n\n  for (let [department, information] of Object.entries(tempHash)) {\n    let departmentHash = {};\n    departmentHash['agency'] = department.toUpperCase();\n    let dataArray = [];\n    for (let [year, expense] of Object.entries(information)) {\n      dataArray.push({\n        x: year,\n        y: expense * 1000, // Dollar fields was rounded to thousdands\n      });\n    }\n    departmentHash['data'] = dataArray;\n    returnArray.push(departmentHash);\n  }\n  return returnArray;\n}\nexport default parseExpenseActuals;\n","import { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport axios from 'axios';\nimport {\n  parseAgencyApi,\n  processCapitalExpenditures,\n  parseExpenseActuals,\n} from '../functions';\n\n// Initial State\nconst defaultState = {\n  currentDataSet: '',\n  capitalExp: null,\n  agencyExp: null,\n  expenseActuals: null,\n};\n\n// Action Types\nconst STORE_CAPITAL_EXP = 'STORE_CAPITAL_EXP';\nconst STORE_AGENCY_EXP = 'STORE_AGENCY_EXP';\nconst STORE_EXPENSE_ACTUALS = 'STORE_EXPENSE_ACTUALS';\nconst UPDATE_CURRENT_DATASET = 'UPDATE_CURRENT_DATASET';\n\n// Action Creators\nconst storeCapitalExp = (capitalExp) => ({\n  type: STORE_CAPITAL_EXP,\n  capitalExp,\n});\n\nconst storeAgencyExp = (agencyExp) => ({\n  type: STORE_AGENCY_EXP,\n  agencyExp,\n});\n\nconst storeExpenseActuals = (expenseActuals) => ({\n  type: STORE_EXPENSE_ACTUALS,\n  expenseActuals,\n});\n\nconst updateCurrentDataSet = (currentDataSet) => ({\n  type: UPDATE_CURRENT_DATASET,\n  currentDataSet,\n});\n\n// Thunk Creators\nexport const getCapitalExp = () => async (dispatch) => {\n  try {\n    let res = await axios.get(\n      'https://data.cityofnewyork.us/resource/hukm-snmq.json'\n    );\n    const processedData = processCapitalExpenditures(res.data);\n\n    dispatch(storeCapitalExp(processedData));\n    dispatch(updateCurrentDataSet('capitalExp'));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport const getAgencyExp = () => async (dispatch) => {\n  try {\n    let res = await axios.get(\n      'https://data.cityofnewyork.us/resource/cwjy-rrh3.json'\n    );\n    const processedData = parseAgencyApi(res.data);\n\n    dispatch(storeAgencyExp(processedData));\n    dispatch(updateCurrentDataSet('agencyExp'));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport const getExpenseActuals = () => async (dispatch) => {\n  try {\n    let res = await axios.get(\n      'https://data.cityofnewyork.us/resource/7yay-m4ae.json'\n    );\n    const processedData = parseExpenseActuals(res.data);\n\n    dispatch(storeExpenseActuals(processedData));\n    dispatch(updateCurrentDataSet('expenseActuals'));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Reducer\nconst reducer = (state = defaultState, action) => {\n    let newState;\n  switch (action.type) {\n    case STORE_CAPITAL_EXP:\n       newState = {...state, capitalExp: action.capitalExp}\n      return newState;\n    case STORE_AGENCY_EXP:\n       newState = {...state, agencyExp: action.agencyExp}\n      return newState;\n    case STORE_EXPENSE_ACTUALS:\n       newState = {...state, expenseActuals: action.expenseActuals}\n      return newState;\n    case UPDATE_CURRENT_DATASET:\n      newState = {...state, currentDataSet: action.currentDataSet};\n      return newState;\n    default:\n      return state;\n  }\n};\n\n// Store\nconst store = createStore(\n  reducer,\n  applyMiddleware(thunk, createLogger({ collapsed: true }))\n);\n\nexport default store;\n","import React, { Component } from 'react';\nimport {\n  VictoryChart,\n  VictoryLine,\n  VictoryTheme,\n  VictoryLegend,\n  VictoryLabel,\n} from 'victory';\n\nclass Graph extends Component {\n  render() {\n    let legendData = [];\n\n    const returnedArray = this.props.currentDataSet;\n\n    function getRandomColor() {\n      var letters = '0123456789ABCDEF';\n      var color = '#';\n      for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n      }\n      return color;\n    }\n\n    let displayName = \"\"\n\n    if (this.props.currentDataSetName === 'capitalExp') {\n      displayName = \"Capital Expenditures\"\n    } else if (this.props.currentDataSetName === 'agencyExp') {\n      displayName = \"Agency Expenditures\"\n    } else if (this.props.currentDataSetName === 'expenseActuals') {\n      displayName = \"Expense Actuals\"\n    }\n\n    console.log(this.props.currentDataSetName)\n    return (\n      <div id={'graph-container'}>\n        <VictoryChart\n        id=\"victory-chart\"\n          scale=\"linear\"\n          theme={VictoryTheme.material}\n          padding={{left: 100, bottom: 50, right: 100, top: 100}}\n          style={{parent: { maxwidth: 1000}}}\n          width={1000} // aspect ratio to stretch graph horizontally\n        >\n          <VictoryLabel\n          id=\"chart-title\"\n          text={displayName}\n          style={{fontSize: \"20px\"}}\n          dy={30}\n          dx={30}\n          textAnchor=\"start\"/>\n\n          {returnedArray.map((currentDept) => {\n            let color = getRandomColor();\n            legendData.push({\n              name: currentDept.agency,\n              symbol: { fill: color },\n            });\n            return (\n              <VictoryLine\n                key={currentDept.agency}\n                style={{\n                  data: { stroke: color },\n                  parent: { border: '1px solid #ccc' },\n                }}\n                data={currentDept.data}\n              />\n            );\n          })}\n        </VictoryChart>\n        <VictoryLegend  \n          gutter={20}\n          itemsPerRow={30}\n          data={legendData}\n          width={1000} // aspect ratio to make the legend a good size relative to the chart\n        />\n      </div>\n    );\n  }\n}\n\nexport default Graph;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport { getCapitalExp, getAgencyExp, getExpenseActuals } from '../store';\nimport { connect } from 'react-redux';\nimport Graph from './Graph';\n\nconst useStyles = (theme) => ({\n  root: {\n    minWidth: 100,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nclass Cards extends Component {\n  render() {\n    const { classes } = this.props;\n    const listOfExpenses = [\n      {\n        name: 'Capital Expenditures',\n        definition:\n          'Capital expenditures are the amounts spent for tangible assets that will be used for more than one year in the operations of a business.',\n      },\n      {\n        name: 'Agency Expenditures',\n        definition:\n          'Annual spending for personal services and other than personal services (OTPS) within each city agency.',\n      },\n      {\n        name: 'Expense Actuals',\n        definition:\n          'How much money an account has paid out in expenditures at a given point in time during a fiscal year.',\n      },\n    ];\n\n    return (\n      <div>\n      <div className=\"card-container\">\n        {listOfExpenses.map((currentExpense) => {\n          return (\n            <Card\n              className={`${classes.root}} card`}\n              variant=\"outlined\"\n              key={currentExpense.name}\n            >\n              <CardContent >\n                <p className=\"card-title\">\n                  {currentExpense.name}\n                  </p>\n                  <p className=\"card-descrition\">\n                  {currentExpense.definition}\n                  </p>\n              </CardContent>\n              <Button\n                id=\"button\"\n                onClick={() => {\n                  this.props.getData(currentExpense.name);\n                }}\n              >\n                Show Graph\n              </Button>\n            </Card>\n          );\n        })}\n      </div>\n      <Graph currentDataSet={this.props.currentDataSet()} currentDataSetName={this.props.currentDataSetName}/>\n      </div>\n    );\n  }\n}\n\nCards.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nconst mapDispatch = (dispatch) => ({\n  getData: (name) => {\n    switch (name) {\n      case 'Capital Expenditures':\n        dispatch(getCapitalExp());\n        return;\n      case 'Agency Expenditures':\n        dispatch(getAgencyExp());\n        return;\n      case 'Expense Actuals':\n        dispatch(getExpenseActuals());\n        return;\n      default:\n        return;\n    }\n  },\n});\n\nconst mapState = (state) => ({\n  currentDataSet: () => {\n    if (state.currentDataSet === 'capitalExp') {\n      return state.capitalExp\n    } else if (state.currentDataSet === 'agencyExp') {\n      return state.agencyExp\n    } else if (state.currentDataSet === 'expenseActuals') {\n      return state.expenseActuals;\n    } else {\n      return [];\n    }\n  },\n\n  currentDataSetName: state.currentDataSet\n\n})\n\nexport default connect(mapState, mapDispatch)(withStyles(useStyles)(Cards));\n","import React, { Component } from 'react';\nimport logo from './logo.png';\nimport './App.css';\nimport Cards from './components/Cards';\n\nclass App extends Component {\n\n\n\n  render () {\n    return (\n      <div className=\"App\">\n        \n        <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <Cards />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}